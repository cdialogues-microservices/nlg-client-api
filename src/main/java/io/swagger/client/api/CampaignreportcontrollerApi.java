/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.CampaignIterationReport;
import io.swagger.client.model.Experiment;
import io.swagger.client.model.ReportInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CampaignreportcontrollerApi {
    private ApiClient apiClient;

    public CampaignreportcontrollerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignreportcontrollerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for fetchCampaignReportsPerIterationUsingGET */
    private com.squareup.okhttp.Call fetchCampaignReportsPerIterationUsingGETCall(Long campaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/api/campaign-report/per-iteration".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "campaignId", campaignId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"BearerTokenAuthentication"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Fetching reports per iteration
     * 
     * @param campaignId CampaignId (optional, default to 1)
     * @return CampaignIterationReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CampaignIterationReport fetchCampaignReportsPerIterationUsingGET(Long campaignId) throws ApiException {
        ApiResponse<CampaignIterationReport> resp = fetchCampaignReportsPerIterationUsingGETWithHttpInfo(campaignId);
        return resp.getData();
    }

    /**
     * Fetching reports per iteration
     * 
     * @param campaignId CampaignId (optional, default to 1)
     * @return ApiResponse&lt;CampaignIterationReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CampaignIterationReport> fetchCampaignReportsPerIterationUsingGETWithHttpInfo(Long campaignId) throws ApiException {
        com.squareup.okhttp.Call call = fetchCampaignReportsPerIterationUsingGETCall(campaignId, null, null);
        Type localVarReturnType = new TypeToken<CampaignIterationReport>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetching reports per iteration (asynchronously)
     * 
     * @param campaignId CampaignId (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchCampaignReportsPerIterationUsingGETAsync(Long campaignId, final ApiCallback<CampaignIterationReport> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchCampaignReportsPerIterationUsingGETCall(campaignId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CampaignIterationReport>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getExperimentsByCampaignIdUsingGET */
    private com.squareup.okhttp.Call getExperimentsByCampaignIdUsingGETCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getExperimentsByCampaignIdUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/campaign-report/campaign/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"BearerTokenAuthentication"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getExperimentsByCampaignId
     * 
     * @param id id (required)
     * @return List&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Experiment> getExperimentsByCampaignIdUsingGET(Long id) throws ApiException {
        ApiResponse<List<Experiment>> resp = getExperimentsByCampaignIdUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * getExperimentsByCampaignId
     * 
     * @param id id (required)
     * @return ApiResponse&lt;List&lt;Experiment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Experiment>> getExperimentsByCampaignIdUsingGETWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getExperimentsByCampaignIdUsingGETCall(id, null, null);
        Type localVarReturnType = new TypeToken<List<Experiment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getExperimentsByCampaignId (asynchronously)
     * 
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExperimentsByCampaignIdUsingGETAsync(Long id, final ApiCallback<List<Experiment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExperimentsByCampaignIdUsingGETCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Experiment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTopMessagesByCampaignIdUsingGET */
    private com.squareup.okhttp.Call getTopMessagesByCampaignIdUsingGETCall(Long campaignId, Integer number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/api/campaign-report/campaign".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "campaignId", campaignId));
        if (number != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "number", number));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"BearerTokenAuthentication"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getTopMessagesByCampaignId
     * 
     * @param campaignId CampaignId (optional, default to 1)
     * @param number Number of top messages (optional, default to 10)
     * @return List&lt;ReportInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReportInfo> getTopMessagesByCampaignIdUsingGET(Long campaignId, Integer number) throws ApiException {
        ApiResponse<List<ReportInfo>> resp = getTopMessagesByCampaignIdUsingGETWithHttpInfo(campaignId, number);
        return resp.getData();
    }

    /**
     * getTopMessagesByCampaignId
     * 
     * @param campaignId CampaignId (optional, default to 1)
     * @param number Number of top messages (optional, default to 10)
     * @return ApiResponse&lt;List&lt;ReportInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReportInfo>> getTopMessagesByCampaignIdUsingGETWithHttpInfo(Long campaignId, Integer number) throws ApiException {
        com.squareup.okhttp.Call call = getTopMessagesByCampaignIdUsingGETCall(campaignId, number, null, null);
        Type localVarReturnType = new TypeToken<List<ReportInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getTopMessagesByCampaignId (asynchronously)
     * 
     * @param campaignId CampaignId (optional, default to 1)
     * @param number Number of top messages (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTopMessagesByCampaignIdUsingGETAsync(Long campaignId, Integer number, final ApiCallback<List<ReportInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTopMessagesByCampaignIdUsingGETCall(campaignId, number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReportInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTopMessagesByTargetGroupIdUsingGET */
    private com.squareup.okhttp.Call getTopMessagesByTargetGroupIdUsingGETCall(Integer number, Long targetGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/api/campaign-report/target_group".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (number != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "number", number));
        if (targetGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "targetGroupId", targetGroupId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"BearerTokenAuthentication"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getTopMessagesByTargetGroupId
     * 
     * @param number Number of top messages (optional, default to 10)
     * @param targetGroupId TargetGroupId (optional, default to 1)
     * @return List&lt;ReportInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReportInfo> getTopMessagesByTargetGroupIdUsingGET(Integer number, Long targetGroupId) throws ApiException {
        ApiResponse<List<ReportInfo>> resp = getTopMessagesByTargetGroupIdUsingGETWithHttpInfo(number, targetGroupId);
        return resp.getData();
    }

    /**
     * getTopMessagesByTargetGroupId
     * 
     * @param number Number of top messages (optional, default to 10)
     * @param targetGroupId TargetGroupId (optional, default to 1)
     * @return ApiResponse&lt;List&lt;ReportInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReportInfo>> getTopMessagesByTargetGroupIdUsingGETWithHttpInfo(Integer number, Long targetGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getTopMessagesByTargetGroupIdUsingGETCall(number, targetGroupId, null, null);
        Type localVarReturnType = new TypeToken<List<ReportInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getTopMessagesByTargetGroupId (asynchronously)
     * 
     * @param number Number of top messages (optional, default to 10)
     * @param targetGroupId TargetGroupId (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTopMessagesByTargetGroupIdUsingGETAsync(Integer number, Long targetGroupId, final ApiCallback<List<ReportInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTopMessagesByTargetGroupIdUsingGETCall(number, targetGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReportInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
