/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.Experiment;
import io.swagger.client.model.ExperimentClient;
import io.swagger.client.model.DisplayedMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExperimentclientcontrollerApi {
    private ApiClient apiClient;

    public ExperimentclientcontrollerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExperimentclientcontrollerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createExperimentMoreReadableUsingPOST */
    private com.squareup.okhttp.Call createExperimentMoreReadableUsingPOSTCall(ExperimentClient experimentClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = experimentClient;
        
        // verify the required parameter 'experimentClient' is set
        if (experimentClient == null) {
            throw new ApiException("Missing the required parameter 'experimentClient' when calling createExperimentMoreReadableUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1.0/experiments/client".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"BearerTokenAuthentication"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * createExperimentMoreReadable
     * 
     * @param experimentClient experimentClient (required)
     * @return Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Experiment createExperimentMoreReadableUsingPOST(ExperimentClient experimentClient) throws ApiException {
        ApiResponse<Experiment> resp = createExperimentMoreReadableUsingPOSTWithHttpInfo(experimentClient);
        return resp.getData();
    }

    /**
     * createExperimentMoreReadable
     * 
     * @param experimentClient experimentClient (required)
     * @return ApiResponse&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Experiment> createExperimentMoreReadableUsingPOSTWithHttpInfo(ExperimentClient experimentClient) throws ApiException {
        com.squareup.okhttp.Call call = createExperimentMoreReadableUsingPOSTCall(experimentClient, null, null);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createExperimentMoreReadable (asynchronously)
     * 
     * @param experimentClient experimentClient (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createExperimentMoreReadableUsingPOSTAsync(ExperimentClient experimentClient, final ApiCallback<Experiment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createExperimentMoreReadableUsingPOSTCall(experimentClient, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createExperimentUsingPOST */
    private com.squareup.okhttp.Call createExperimentUsingPOSTCall(Experiment experiment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = experiment;
        
        // verify the required parameter 'experiment' is set
        if (experiment == null) {
            throw new ApiException("Missing the required parameter 'experiment' when calling createExperimentUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1.0/experiments".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"BearerTokenAuthentication"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * createExperiment
     * 
     * @param experiment experiment (required)
     * @return Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Experiment createExperimentUsingPOST(Experiment experiment) throws ApiException {
        ApiResponse<Experiment> resp = createExperimentUsingPOSTWithHttpInfo(experiment);
        return resp.getData();
    }

    /**
     * createExperiment
     * 
     * @param experiment experiment (required)
     * @return ApiResponse&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Experiment> createExperimentUsingPOSTWithHttpInfo(Experiment experiment) throws ApiException {
        com.squareup.okhttp.Call call = createExperimentUsingPOSTCall(experiment, null, null);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createExperiment (asynchronously)
     * 
     * @param experiment experiment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createExperimentUsingPOSTAsync(Experiment experiment, final ApiCallback<Experiment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createExperimentUsingPOSTCall(experiment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getExperimentShortUsingGET */
    private com.squareup.okhttp.Call getExperimentShortUsingGETCall(Long experimentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'experimentId' is set
        if (experimentId == null) {
            throw new ApiException("Missing the required parameter 'experimentId' when calling getExperimentShortUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1.0/experiments/short/{experimentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "experimentId" + "\\}", apiClient.escapeString(experimentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"BearerTokenAuthentication"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getExperimentShort
     * 
     * @param experimentId experimentId (required)
     * @return Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Experiment getExperimentShortUsingGET(Long experimentId) throws ApiException {
        ApiResponse<Experiment> resp = getExperimentShortUsingGETWithHttpInfo(experimentId);
        return resp.getData();
    }

    /**
     * getExperimentShort
     * 
     * @param experimentId experimentId (required)
     * @return ApiResponse&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Experiment> getExperimentShortUsingGETWithHttpInfo(Long experimentId) throws ApiException {
        com.squareup.okhttp.Call call = getExperimentShortUsingGETCall(experimentId, null, null);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getExperimentShort (asynchronously)
     * 
     * @param experimentId experimentId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExperimentShortUsingGETAsync(Long experimentId, final ApiCallback<Experiment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExperimentShortUsingGETCall(experimentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getExperimentUsingGET */
    private com.squareup.okhttp.Call getExperimentUsingGETCall(Long experimentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'experimentId' is set
        if (experimentId == null) {
            throw new ApiException("Missing the required parameter 'experimentId' when calling getExperimentUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1.0/experiments/{experimentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "experimentId" + "\\}", apiClient.escapeString(experimentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"BearerTokenAuthentication"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getExperiment
     * 
     * @param experimentId experimentId (required)
     * @return Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Experiment getExperimentUsingGET(Long experimentId) throws ApiException {
        ApiResponse<Experiment> resp = getExperimentUsingGETWithHttpInfo(experimentId);
        return resp.getData();
    }

    /**
     * getExperiment
     * 
     * @param experimentId experimentId (required)
     * @return ApiResponse&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Experiment> getExperimentUsingGETWithHttpInfo(Long experimentId) throws ApiException {
        com.squareup.okhttp.Call call = getExperimentUsingGETCall(experimentId, null, null);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getExperiment (asynchronously)
     * 
     * @param experimentId experimentId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExperimentUsingGETAsync(Long experimentId, final ApiCallback<Experiment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExperimentUsingGETCall(experimentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getExperimentsByStatusUsingGET */
    private com.squareup.okhttp.Call getExperimentsByStatusUsingGETCall(String status, String channel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling getExperimentsByStatusUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1.0/experiments/status".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (channel != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "channel", channel));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"BearerTokenAuthentication"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getExperimentsByStatus
     * 
     * @param status status (required)
     * @param channel channel (optional)
     * @return List&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Experiment> getExperimentsByStatusUsingGET(String status, String channel) throws ApiException {
        ApiResponse<List<Experiment>> resp = getExperimentsByStatusUsingGETWithHttpInfo(status, channel);
        return resp.getData();
    }

    /**
     * getExperimentsByStatus
     * 
     * @param status status (required)
     * @param channel channel (optional)
     * @return ApiResponse&lt;List&lt;Experiment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Experiment>> getExperimentsByStatusUsingGETWithHttpInfo(String status, String channel) throws ApiException {
        com.squareup.okhttp.Call call = getExperimentsByStatusUsingGETCall(status, channel, null, null);
        Type localVarReturnType = new TypeToken<List<Experiment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getExperimentsByStatus (asynchronously)
     * 
     * @param status status (required)
     * @param channel channel (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExperimentsByStatusUsingGETAsync(String status, String channel, final ApiCallback<List<Experiment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExperimentsByStatusUsingGETCall(status, channel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Experiment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getNextMessageByExperimentIdForEmailUsingGET */
    private com.squareup.okhttp.Call getNextMessageByExperimentIdForEmailUsingGETCall(Long experimentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'experimentId' is set
        if (experimentId == null) {
            throw new ApiException("Missing the required parameter 'experimentId' when calling getNextMessageByExperimentIdForEmailUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1.0/experiments/next-message-used/{experimentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "experimentId" + "\\}", apiClient.escapeString(experimentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"BearerTokenAuthentication"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getNextMessageByExperimentIdForEmail
     * 
     * @param experimentId experimentId (required)
     * @return DisplayedMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DisplayedMessage getNextMessageByExperimentIdForEmailUsingGET(Long experimentId) throws ApiException {
        ApiResponse<DisplayedMessage> resp = getNextMessageByExperimentIdForEmailUsingGETWithHttpInfo(experimentId);
        return resp.getData();
    }

    /**
     * getNextMessageByExperimentIdForEmail
     * 
     * @param experimentId experimentId (required)
     * @return ApiResponse&lt;DisplayedMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DisplayedMessage> getNextMessageByExperimentIdForEmailUsingGETWithHttpInfo(Long experimentId) throws ApiException {
        com.squareup.okhttp.Call call = getNextMessageByExperimentIdForEmailUsingGETCall(experimentId, null, null);
        Type localVarReturnType = new TypeToken<DisplayedMessage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getNextMessageByExperimentIdForEmail (asynchronously)
     * 
     * @param experimentId experimentId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNextMessageByExperimentIdForEmailUsingGETAsync(Long experimentId, final ApiCallback<DisplayedMessage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNextMessageByExperimentIdForEmailUsingGETCall(experimentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DisplayedMessage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getNextMessageByExperimentIdUsingGET */
    private com.squareup.okhttp.Call getNextMessageByExperimentIdUsingGETCall(Long experimentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'experimentId' is set
        if (experimentId == null) {
            throw new ApiException("Missing the required parameter 'experimentId' when calling getNextMessageByExperimentIdUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1.0/experiments/next-message/{experimentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "experimentId" + "\\}", apiClient.escapeString(experimentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"BearerTokenAuthentication"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getNextMessageByExperimentId
     * 
     * @param experimentId experimentId (required)
     * @return DisplayedMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DisplayedMessage getNextMessageByExperimentIdUsingGET(Long experimentId) throws ApiException {
        ApiResponse<DisplayedMessage> resp = getNextMessageByExperimentIdUsingGETWithHttpInfo(experimentId);
        return resp.getData();
    }

    /**
     * getNextMessageByExperimentId
     * 
     * @param experimentId experimentId (required)
     * @return ApiResponse&lt;DisplayedMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DisplayedMessage> getNextMessageByExperimentIdUsingGETWithHttpInfo(Long experimentId) throws ApiException {
        com.squareup.okhttp.Call call = getNextMessageByExperimentIdUsingGETCall(experimentId, null, null);
        Type localVarReturnType = new TypeToken<DisplayedMessage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getNextMessageByExperimentId (asynchronously)
     * 
     * @param experimentId experimentId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNextMessageByExperimentIdUsingGETAsync(Long experimentId, final ApiCallback<DisplayedMessage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNextMessageByExperimentIdUsingGETCall(experimentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DisplayedMessage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getNextMessagePushByExperimentIdUsingGET */
    private com.squareup.okhttp.Call getNextMessagePushByExperimentIdUsingGETCall(Long experimentId, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'experimentId' is set
        if (experimentId == null) {
            throw new ApiException("Missing the required parameter 'experimentId' when calling getNextMessagePushByExperimentIdUsingGET(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getNextMessagePushByExperimentIdUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1.0/experiments/next-message-push/{experimentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "experimentId" + "\\}", apiClient.escapeString(experimentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"BearerTokenAuthentication"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getNextMessagePushByExperimentId
     * 
     * @param experimentId experimentId (required)
     * @param userId userId (required)
     * @return DisplayedMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DisplayedMessage getNextMessagePushByExperimentIdUsingGET(Long experimentId, String userId) throws ApiException {
        ApiResponse<DisplayedMessage> resp = getNextMessagePushByExperimentIdUsingGETWithHttpInfo(experimentId, userId);
        return resp.getData();
    }

    /**
     * getNextMessagePushByExperimentId
     * 
     * @param experimentId experimentId (required)
     * @param userId userId (required)
     * @return ApiResponse&lt;DisplayedMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DisplayedMessage> getNextMessagePushByExperimentIdUsingGETWithHttpInfo(Long experimentId, String userId) throws ApiException {
        com.squareup.okhttp.Call call = getNextMessagePushByExperimentIdUsingGETCall(experimentId, userId, null, null);
        Type localVarReturnType = new TypeToken<DisplayedMessage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getNextMessagePushByExperimentId (asynchronously)
     * 
     * @param experimentId experimentId (required)
     * @param userId userId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNextMessagePushByExperimentIdUsingGETAsync(Long experimentId, String userId, final ApiCallback<DisplayedMessage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNextMessagePushByExperimentIdUsingGETCall(experimentId, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DisplayedMessage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
